/*
hdu 1520 “Anniversary Party”
树 形 D P
*/

#include <bits/stdc++.h>
using namespace std;
const int N = 6000 + 5;
int value[N], dp[N][2], father[N], n;
vector <int> tree[N];
void dfs(int u) {
	dp[u][0] = 0;					//赋初值：不参加宴会
	dp[u][1] = value[u];			//赋初值：参加宴会
	for (int i = 0; i < tree[u].size(); i++) {		//注意处理这个父节点的每个子节点
		int son = tree[u][i];
		dfs(son);					//深搜子节点
		dp[u][0] += max(dp[son][1], dp[son][0]);
									//父节点不选，子节点可选可不选
		dp[u][1] += dp[son][0];		//父节点选择，子节点不选
	}
}
int main() {
	while (~scanf("%d", &n)) {
		for (int i = 1; i <= n; i++) {
			scanf("%d", &value[i]);
			tree[i].clear();
			father[i] = -1;			//赋初值，还未建立关系
		}
		while (1) {
			int a, b;
			scanf("%d%d", &a, &b);
			if (a == 0 && b == 0) break;
			tree[b].push_back(a);	//用邻接表建树
			father[a] = b;			//父子关系
		}
		int t = 1;
		while (father[t] != -1)
			t = father[t];			//查找树的根节点
		dfs(t);						//从根节点开始，用DFS遍历整颗树
		printf("%d\n", max(dp[t][1], dp[t][0]));	
	}
	return 0;
}
