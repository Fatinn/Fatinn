#include<iostream>
#include<cstring>
using namespace std;

const int MAX=55;
const int K=15; 
const int MOD=1000000007; 
int n,m,k;
int map[MAX][MAX];
int dp[MAX][MAX][K][K];	//dp[x][y][num][max]=n表示当在位置x,y时，其手上共有num件宝物
						//其中价值最大的是max，从这个位置到终点共有n种取法（走的路线和拿的策略） 
int dfs(int x,int y,int num,int maxValue)
{
	//记忆化（若在之前遍历过而已经得的了这个情况下的数据时，就不再继续dfs下去了） 
	if(dp[x][y][num][maxValue+1]!=-1) //由于maxValue的初始值必须为-1，在索引里最小为0，因此需要+1 
		return dp[x][y][num][maxValue+1];
	//当到达出口时判断 
	if(x==n && y==m){
		if(num==k || num==k-1&&map[x][y]>maxValue) 
			return 1;
		return 0;
	}
	//两种行走方式 
	long long sum=0;			//用long long（最大为900多亿亿）保险 
	if(x+1<=n){					//如果可以往下走 
		if(map[x][y]>maxValue)	//如果当前手中宝物最大值小于当前正在的这个点的宝物价值 
			sum+=dfs(x+1,y,num+1,map[x][y]);	//则可以拿 
		sum+=dfs(x+1,y,num,maxValue); 			//也可以不拿 
	}
	if(y+1<=m){					//如果可以往右走 
		if(map[x][y]>maxValue)
			sum+=dfs(x,y+1,num+1,map[x][y]);
		sum+=dfs(x,y+1,num,maxValue);
	}
	return dp[x][y][num][maxValue+1]=sum%MOD;
}

int main()
{
	cin>>n>>m>>k;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			cin>>map[i][j];
	memset(dp,-1,sizeof(dp));
	dfs(1,1,0,-1);				//特别注意：你的初始价值必须为-1，因为宝物的最小值是包括了0的 
	cout<<dp[1][1][0][0]<<endl;
	return 0;
}
