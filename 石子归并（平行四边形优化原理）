/*
区间DP问题
 把大问题化成小问题，因为N堆石子最终只会合并成2堆，所以我们只有把最后的两堆石子分开满足最优合并方案，
  问题就可以得到最优解。 
  动态规划：用f[i,j]表示第i颗石子到第j颗石子合并后的最小值，即：
   f[i][j]=min( f[i][j]  , f[i][k]+f[k+1][j]+sum[i][j]  )   ( I<=k<=j-1 ) ； 
*/

#include <bits/stdc++.h>
using namespace std;
const int INF = 1 << 30;
const int N = 300;
int sum[N], n;
int Minval() {
	int dp[N][N];
	for (int i = 1; i <= n; i++)
	{
		dp[i][i] = 0;
		s[i][i] = i;				//初始值
	}
	for (int len = 1; len < n; len++)				//len是i和j之间的距离
	{			
		for (int i = 1; i <= n - len; i++) {		//从第i堆开始
			int j = i + len;						//到底j堆结束
			dp[i][j] = INF;
			for (int k = s[i][j - 1]; k <= s[i + 1][j]; k++)
			{
				if (dp[i][k] + dp[k + 1][j] + sum[j] - sum[i - 1] < dp[i][j]) {	//缩小范围
					dp[i][j] = dp[i][k] + dp[k + 1][j] + sum[j] - sum[i - 1];
					s[i]][j] = k;				//记录[i，j]的最优分割点
				}
			}
		}
	}
	return dp[1][n];
}

int main() {
	while (cin >> n) {
		sum[0] = 0;
		for (int i = 1; i <= n; i++) {
			int x;
			cin >> x;
			sum[i] = sum[i - 1] + x;		//sum[i，j]的值等于sum[j]-sum[i-1]
		}	
		cout << Minval() << endl;
	}
	return 0;
}
